


********************************************************************************
Example 1: The direct and inverse discrete Fourier transform algorithms are used directly based on the forward formula.
note: A signal will be recorded from a microphone, its graph will be plotted,
    the direct discrete Fourier transform will be applied with a graph of the result,
    then the inverse discrete Fourier transform will be applied,
    the signal will be reconstructed from the obtained data,
    its graph will be plotted, and finally, it will be reproduced through the speakers.
note: The graphs of the "input" and "output" signals will coincide.
Variables:
    filename_input = "../data/input_signal.wav"
    filename_output = "../data/output_signal.wav"
    SECONDS = 3.0
    RATE = 4000
    CHUNK = 1024
    CHANNELS = 1
    need_to_plot = True
    mirror_image = True
--------------------------------------------------------------------------------
Example 2: The direct and inverse discrete Fourier transform algorithms are used directly based on the forward formula with computation parallelized across 8 cores.
note: A signal will be recorded from a microphone, its graph will be plotted,
    the direct discrete Fourier transform (computation parallelized across 8 cores) will be applied with a graph of the result,
    then the inverse discrete Fourier transform (computation parallelized across 8 cores) will be applied,
    the signal will be reconstructed from the obtained data,
    its graph will be plotted, and finally, it will be reproduced through the speakers.
note: The graphs of the "input" and "output" signals will coincide.
Variables:
    filename_input = "../data/input_signal2.wav"
    filename_output = "../data/output_signal2.wav"
    SECONDS = 3.0
    RATE = 9000
    CHUNK = 1024
    CHANNELS = 1
    need_to_plot = True
    mirror_image = True
--------------------------------------------------------------------------------
Example 3: The fast direct and fast inverse discrete Fourier transform algorithms are used.
note: It may be necessary to match the parameters of the recording to use the FFT and IFFT algorithms.
    The matching will be done by adjusting the duration of the recording. The function "signal_recording" will suggest doing this if necessary.
note: A signal will be recorded from a microphone, its graph will be plotted,
    the fast direct discrete Fourier transform will be applied with a graph of the result,
    then the inverse fast discrete Fourier transform will be applied,
    the signal will be reconstructed from the obtained data,
    its graph will be plotted, and finally, it will be reproduced through the speakers.
note: The graphs of the "input" and "output" signals will coincide.
Variables:
    filename_input = "../data/input_signal3.wav"
    filename_output = "../data/output_signal3.wav"
    SECONDS = 10 (note: In this example, FFT and IFFT algorithms are used. Please agree to change the recording duration if needed.)
    RATE = 44100
    CHUNK = 1024
    CHANNELS = 1
    need_to_plot = True
    mirror_image = True
--------------------------------------------------------------------------------
Example 4: The fast direct and fast inverse discrete Fourier transform algorithms are used for a signal with a frequency of 440 Hz.
note: It assumes the existence of a file with a frequency of 440 Hz, and the volume of its data allows for the application of fast algorithms.
    One of such files exists in the "examples" folder located within the "data" directory.
note: A signal of 440 Hz with a duration of 11 seconds and 89 milliseconds will be played, its graph will be plotted,
    the fast direct discrete Fourier transform will be applied with a graph of the result,
    then the inverse fast discrete Fourier transform will be applied,
    the signal will be reconstructed from the obtained data,
    its graph will be plotted, and finally, it will be reproduced through the speakers.
note: The graphs of the "input" and "output" signals will coincide.
Variables:
    filename_input = "../data/examples/signal_440hz_duration_11s-89ms.wav"
    filename_output = "../data/reconstructed_signal_440hz_duration_11s-89ms.wav"
    RATE = 11025
    CHANNELS = 1
    need_to_plot = True
    mirror_image = True
--------------------------------------------------------------------------------
Example 5: The fast direct and fast inverse Fourier transform algorithms are used for the generated signal (sum of sinusoids with specified frequencies).
    note: It may be necessary to match the parameters of the recording to use the FFT and IFFT algorithms.
	    The matching will be done by adjusting the duration of the recording. The function "signal_generator" will suggest doing this if necessary.
    note: The signal will be generated from the sum of sinusoids with specified frequencies, its graph will be plotted,
	    the fast direct discrete Fourier transform will be applied with a graph of the result,
	    then the inverse fast discrete Fourier transform will be applied,
	    the signal will be reconstructed from the obtained data,
	    its graph will be plotted, and finally, it will be reproduced through the speakers.
    note: The graphs of the "input" and "output" signals will coincide.
Variables:
    filename_input = "../data/input_generated_signal5.wav"
    filename_output = "../data/output_generated_signal5.wav"
    SECONDS = 3 (note: In this example, FFT and IFFT algorithms are used. Please agree to change the recording duration if needed.)
    RATE = 44100
    frequencies = [200, 350, 400, 550, 700, 850, 1000]
    need_to_plot = True
    mirror_image = True
--------------------------------------------------------------------------------
********************************************************************************


